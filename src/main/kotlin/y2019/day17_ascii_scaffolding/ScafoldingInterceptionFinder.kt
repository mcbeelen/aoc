package y2019.day17_ascii_scaffolding

import util.grid.Direction
import util.grid.Grid
import util.grid.Plottable
import util.grid.parseToGrid
import y2019.day17_ascii_scaffolding.ScaffoldingField.SCAFFOLDING

enum class ScaffoldingField(val symbol: Char) : Plottable {
    SCAFFOLDING('#'),
    SPACE('.'),
    VACUUM_ROBOT('^');

    override fun toSymbol() = symbol

}

private fun fromSymbol(c: Char) = ScaffoldingField.values().first { it.symbol == c }


fun main() {
    val gridDefinition = ASCII_SCAFFOLDING
    val sum = calculateAlignmentParameter(gridDefinition)

    println(sum)
}


fun calculateAlignmentParameter(gridDefinition: String): Int {
    val grid: Grid<ScaffoldingField> = parseToGrid(gridDefinition, ::fromSymbol)
    val scaffoldIntersections = grid.keys.filter { coordinate ->
        SCAFFOLDING == grid[coordinate] && Direction.values().all { SCAFFOLDING == grid[coordinate.next(it)] }
    }
    return scaffoldIntersections
            .map { it.left * it.top }
            .sum()
}


private const val ASCII_SCAFFOLDING = """
..............................................###########......
..............................................#.........#......
..............................................#.........#......
..............................................#.........#......
......#######.................................#.........#......
......#.....#.................................#.........#......
......#.....#.........#.......................#.........#......
......#.....#.........#.......................#.........#......
......#.....#.........#.......................#.........#......
......#.....#.........#.......................#.........#......
......#.....#############...................#############......
......#...............#.#...................#.#................
......#...............#############.....#######................
......#.................#.........#.....#...#..................
......#.................#.........#.....#...#..................
......#.................#.........#.....#...#..................
^######.................#############...#.#########............
..................................#.#...#.#.#.....#............
..................................#############...#............
....................................#...#.#.#.#...#............
....................................#...#############..........
....................................#.....#.#.#...#.#..........
....................................#########.#...#############
..........................................#...#.....#.........#
..........................................#...#.....#.........#
..........................................#...#.....#.........#
........................................#######.....#.........#
........................................#.#.........#.........#
..............................#############.........#.........#
..............................#.........#...........#.........#
..............................#.........#...........#.........#
..............................#.........#...........#.........#
..............................#.........#...........###########
..............................#.........#......................
..............................#.........#......................
..............................#.........#......................
..............................#.........#......................
..............................#.........#......................
..............................###########......................
"""



